---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}
spec:
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      annotations:
        checksum/users: {{ toJson .Values.users | sha256sum }}
      labels:
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
        - name: bastion
          image: "{{ .Values.image.repository }}:{{ tpl .Values.image.tag $ }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command:
            - /bin/bash
            - -ec
            - |
              for file in /etc/ssh_origin/*; do
                NAME=$(basename $file)
                install -Dm0600 /etc/ssh_origin/$NAME /etc/ssh/$NAME
              done

              cd /etc/ssh
              for key_type in dsa rsa ecdsa ed25519; do
                lengh=4096
                [ $key_type == "dsa" ] && lengh=1024
                [ $key_type == "ecdsa" ] && lengh=256
                test -f ssh_host_${key_type}_key || \
                  ssh-keygen -q -N "" -t ${key_type} -b $lengh -f ./ssh_host_${key_type}_key
              done

              USER_UID=1000
              for i in /etc/users/*; do
                useradd -rm -d /home/${i##*/} -s /bin/bash -g root -u $((USER_UID++)) ${i##*/}
                mkdir -p /home/${i##*/}/.ssh
                install -Dm0600 $i /home/${i##*/}/.ssh/authorized_keys
                chmod 700 /home/${i##*/}/.ssh
                chown -R ${i##*/}:nogroup /home/${i##*/}
              done

              mkdir -p /run/sshd

              {{- with .Values.initscripts }}
              {{- range $key, $value := . }}
              /usr/share/initscripts/{{ $key }}
              {{- end }}
              {{- end }}

              /usr/sbin/sshd -D -e -E /proc/1/fd/1
          lifecycle: {{ .Values.lifecycle | toJson }}
          ports:
            - name: ssh
              containerPort: 1022
              protocol: TCP
          volumeMounts:
          - name: config-volume
            mountPath: /etc/users
          - name: sshd-configs-persistent
            mountPath: /etc/ssh
          - name: sshd-configs-origin
            mountPath: /etc/ssh_origin
          - name: usr-share-initscripts
            mountPath: /usr/share/initscripts
          resources:
{{ toYaml .Values.resources | indent 12 }}
      hostNetwork: {{ .Values.hostNetwork }}
      {{- with .Values.dnsConfig }}
      dnsConfig: {{ . | toJson }}
      {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      affinity: {{ .Values.affinity | toJson }}
      imagePullSecrets: {{ .Values.image.imagePullSecrets | toJson }}
{{- with .Values.topologySpreadConstraints }}
      topologySpreadConstraints:
        {{- tpl (toYaml .) $ | nindent 8 }}
{{- end }}
      volumes:
      - name: config-volume
        configMap:
          name: {{ .Release.Name }}
      - name: sshd-configs-persistent
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-etc-ssh
      - name: sshd-configs-origin
        configMap:
          name: {{ .Release.Name }}-etc-ssh-origin
      - name: usr-share-initscripts
        configMap:
          name: {{ .Release.Name }}-usr-share-initscripts
          defaultMode: 0755
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}
data:
{{ toYaml .Values.users | indent 4 }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-etc-ssh-origin
data:
{{ tpl (toYaml .Values.ssh) $ | indent 2 }}

---
# Additional startup commands
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-usr-share-initscripts
data:
{{ tpl (toYaml .Values.initscripts) $ | indent 2 }}

---
# Used to store ssh host keys & other stuff
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Release.Name }}-etc-ssh
spec:
  storageClassName: "{{ .Values.storageClass }}" # Empty string must be explicitly set otherwise default StorageClass will be set
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 1Gi
